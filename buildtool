#!/usr/bin/env python3
# -*- coding: utf-8; mode: Python; indent-tabs-mode: nil; indent-width: 4; -*-
#
# OCO WORKING SET TOOLCHAIN
# Copyright (C) 2017 Arqadium. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# version 2.0.  If a copy of the MPL was not distributed with this file, then
# you can obtain one at <http://mozilla.org/MPL/2.0/>.
#

from colour import color
import ini, os



_prefix = color('[\u00D4\u00C7\u00F4]', fg='white', style='bold')
_actions = {
    'asm':   color(fg='green',   s='Assembling') + '      ',
    'c':     color(fg='cyan',    s='Compiling') + '       ',
    'cxx':   color(fg='blue',    s='Compiling') + '       ',
    'gfx':   color(fg='yellow',  s='Transmogrifying') + ' ',
    'conv':  color(fg='red',     s='Converting') + '      ',
    'link':  color(fg='magenta', s='Linking') + '         ',
    'lint':  color(fg='white',   s='Linting') + '         ',
    'clean': color(fg='white', style='bold', s='Cleaning') + ' '
}
_heads = {
    'start': color('Compilation started', fg='white', style='bold+underline'),
    'pass':  color('Compilation passed', fg='green', style='bold+underline'),
    'fail':  color('Compilation failed', fg='red', style='bold+underline')
}

## ============================ F U N C T I O N ============================ #
## void loc.pprint(string)
##
## TITLE:       Pretty-print
## DESCRIPTION: Print a string with our vendor prefix attached and formatted.
##
## PARAMETER: The string to print after our vendor prefix (optional).
def pprint(s=None, action=None, head=None):
    if head != None and head in _heads:
        print(_prefix + ' ' + _heads[head])
    elif not s:
        print(_prefix)
    elif action != None and action in _actions:
        print(_prefix + ' ' + _actions[action] +
            color(s, fg='black', style='bold') + '...')
    else:
        print(_prefix + ' ' + s)



## ============================ F U N C T I O N ============================ #
## integer build(string)
##
## TITLE:       Build Executable
## DESCRIPTION: Builds a standalone executable from source.
##
## PARAMETER: Directory where the source code is located.
## PARAMETER: Directory for the compiler to search for local includes.
## PARAMETER: List of languages to account for in the build.
## PARAMETER: The name of the output, not including prefixes or extensions.
## PARAMETER: Directory where the build process takes place.
def buildExec(srcDir, incDir, langs, outName, outDir):
    pass



## ============================ F U N C T I O N ============================ #
## integer build(string)
##
## TITLE:       Build Shared Library
## DESCRIPTION: Builds a shared library (.so/.dll) from source.
##
## PARAMETER: Directory where the source code is located.
## PARAMETER: Directory for the compiler to search for local includes.
## PARAMETER: List of languages to account for in the build.
## PARAMETER: The name of the output, not including prefixes or extensions.
## PARAMETER: Directory where the build process takes place.
def buildShared(srcDir, incDir, langs, outName, outDir):
    pass



## ============================ F U N C T I O N ============================ #
## integer build(string)
##
## TITLE:       Build Static Library
## DESCRIPTION: Builds a static library (.a/.lib) from source.
##
## PARAMETER: Directory where the source code is located.
## PARAMETER: Directory for the compiler to search for local includes.
## PARAMETER: List of languages to account for in the build.
## PARAMETER: The name of the output, not including prefixes or extensions.
## PARAMETER: Directory where the build process takes place.
def buildStatic(srcDir, incDir, langs, outName, outDir):
    pass



## ============================ F U N C T I O N ============================ #
## integer build(string)
##
## TITLE:       Build Project
## DESCRIPTION: Builds a single project from source.
##
## PARAMETER: Directory where the project is located.
def build(projDir):
    projectIniPath = os.path.join(projDir, 'project.ini')
    if os.path.isfile(projectIniPath) == False:
        raise Exception('\u2018' + projectIniPath + '\u2019 is inaccessible.')
    dependsIniPath = os.path.join(projDir, 'depends.ini')
    if os.path.isfile(dependsIniPath) == False:
        raise Exception('\u2018' + dependsIniPath + '\u2019 is inaccessible.')
    assetsIniPath = os.path.join(projDir, 'assets.ini')
    if os.path.isfile(assetsIniPath) == False:
        raise Exception('\u2018' + assetsIniPath + '\u2019 is inaccessible.')
    projectIni = ini.parse(projectIniPath)
    dependsIni = ini.parse(dependsIniPath)
    assetsIni = ini.parse(assetsIniPath)
    if(int(projectIni['']['version']) > 0
    or int(dependsIni['']['version']) > 0
    or int(assetsIni['']['version']) > 0):
        raise Exception('One or more INI schemas in \u2018' + projDir +
            '\u2019 are unsupported')
    srcDir = os.path.join(projDir, projectIni['source']['sourcedir'])
    incDir = os.path.join(projDir, projectIni['source']['includedir'])
    _langs = projectIni['source']['langs']
    langs = []
    if ',' in _langs:
        langs += _langs.split(',')
    else:
        langs = [_langs]
    outName = projectIni['output']['name']
    outDir = os.path.join(os.getcwd(), projectIni['output']['path'])
    if(projectIni['output']['type'] == 'executable'):
        buildExec(srcDir, incDir, langs, outName, outDir)
    elif(projectIni['output']['type'] == 'shared'):
        buildShared(srcDir, incDir, langs, outName, outDir)
    elif(projectIni['output']['type'] == 'static'):
        buildStatc(srcDir, incDir, langs, outName, outDir)
    else:
        raise Exception('Invalid output type for project')



## ============================ F U N C T I O N ============================ #
## integer main(string[])
##
## TITLE:       Main
## DESCRIPTION: Application entry point.
##
## PARAMETER: list of command-line arguments, starting with the script name.
##
## RETURNS: Integer exit code; handed back to the operating system.
def main(args):
    if os.name == 'nt':
        from locale import getpreferredencoding
        if getpreferredencoding() != 'cp65001':
            from subprocess import run, PIPE
            run('chcp 65001', shell=True, check=True, stdout=PIPE)
            print('Changed the codepage to UTF-8. Please rerun this script.')
            return 0
    pprint()
    pprint('Arqadium Build Tool')
    pprint('Part of the \u00D4\u00C7\u00F4 Working Set Toolchain')
    pprint('Copyright \u00A9 2017 Arqadium. All rights reserved.')
    pprint()
    argc = len(args)
    if argc < 3:
        raise Exception('Insufficient arguments provided')
    if os.path.isfile(args[1]) == False:
        raise Exception('Provided INI file is inaccessible')
    from re import fullmatch
    if fullmatch(r'debug|release', args[2]) == None:
        raise Exception('Provided build type is invalid')
    mainIni = ini.parse(args[1])
    if int(mainIni['']['version']) > 0:
        raise Exception('Future INI schema version found; not supported')
    pprint(head='start')
    try:
        for key in mainIni['projects']:
            build(mainIni['projects'][key])
    except Exception as ex:
        pprint('Exception in build: {0}'.format(ex))
        pprint(head='fail')
        return -3
    pprint(head='pass')



## =========================== B O O T S T R A P =========================== ##
## Application bootstrapper, guarding against code execution upon import.
if __name__ == '__main__':
    try:
        from sys import argv, exit
        main(argv)
    except Exception as ex:
        raise ex
    except:
        from sys import exc_info
        print('Rogue exception:', exc_info()[0])
